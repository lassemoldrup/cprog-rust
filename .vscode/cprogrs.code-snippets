{
    "Rust cprog": {
        "scope": "rust",
        "prefix": "cprogrs",
        "body": [
            "use std::io::Read;",
            "",
            "fn read<T>() -> T",
            "where",
            "    T: std::str::FromStr,",
            "    T::Err: std::fmt::Debug,",
            "{",
            "    std::io::stdin()",
            "        .bytes()",
            "        .map(|b| b.unwrap() as char)",
            "        .skip_while(|c| c.is_whitespace())",
            "        .take_while(|c| !c.is_whitespace())",
            "        .collect::<String>()",
            "        .parse::<T>()",
            "        .unwrap()",
            "}",
            "",
            "fn read_n<T>(n: usize) -> Vec<T>",
            "where",
            "    T: std::str::FromStr,",
            "    T::Err: std::fmt::Debug,",
            "{",
            "    let mut vec = Vec::with_capacity(n);",
            "    for _ in 0..n {",
            "        vec.push(read::<T>());",
            "    }",
            "    vec",
            "}",
            "",
            "fn read_line() -> String {",
            "    let mut s = String::new();",
            "    std::io::stdin().read_line(&mut s).unwrap();",
            "    s.trim_end().to_string()",
            "}",
            "",
            "fn split_line<T>() -> Vec<T>",
            "where",
            "    T: std::str::FromStr,",
            "    T::Err: std::fmt::Debug,",
            "{",
            "    let mut s = String::new();",
            "    std::io::stdin().read_line(&mut s).unwrap();",
            "    s.split_whitespace()",
            "        .map(|word| word.parse::<T>().unwrap())",
            "        .collect()",
            "}",
            "",
            "fn main() {}",
            ""
        ],
        "description": "Rust competitive programming template"
    }
}
